# This is a basic workflow to help you get started with Actions

name: Integration Test on Azure DevTest Labs 

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
    - feature/azure-devtest-labs-arm-CICD
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-integration-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Variables for creating the leb environment
    env:
      RESOURCE_GROUP: AzureDataPipelineTools_CI
      LAB_NAME: AzureDataPipelineTools
      ARM_TEMPLATE_NAME: sqlcollaborative_AzureDataPipelineTools
      

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Login to Azure
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_DEV_TEST_LABS_CREDENTIALS }}'

    # --raw-output is requiored on all jq commands that select strings, otherwise they come out with the quotes, which is interpreted as a command, and it likely won't exist!
    - name: Create DevTest Labs Environment
      id: create-devtest-labs-environment
      uses: azure/CLI@v1
      with:
        #azcliversion: 2.24.0  # Versions prior to this have a bug creating environments
        inlineScript: |
          echo "========================================================================================================================================================================================================"
          echo "Azure CLI Version: $(az version |  jq '."azure-cli"')"
          echo
          echo "Connection info:"
          az account show | jq '. | {tenantId: .tenantId, subscriptionName: .name, userName: .user.name, userType: .user.type}'
          echo

          ARTIFACT_SOURCE_NAME=$(az lab artifact-source list --resource-group $RESOURCE_GROUP \
                                                             --lab-name $LAB_NAME \
                                     | jq --raw-output \
                                          '.[] | select( .uri == "https://github.com/sqlcollaborative/AzureDataPipelineTools.git" ) | .name' \
                                )

          echo "Artifact Source Name: $ARTIFACT_SOURCE_NAME"

          BRANCH_NAME=${GITHUB_REF#*refs/heads/}
          echo "Branch Name: $BRANCH_NAME"

          # This is the object id of the Enterprise Application created from the App Registration

          echo "Retriving service principal id for the logged in user..."
          SERVICEPRINCIPALAPPID=$(az account show | jq --raw-output '.user.name')
          echo "Service Principal App Id: $SERVICEPRINCIPALAPPID"

          SERVICEPRINCIPALID=$( az ad sp list --filter "appId eq '$SERVICEPRINCIPALAPPID' and servicePrincipalType eq 'Application'" --query [0].objectId --output tsv)
          echo "Service Principal Object Id: $SERVICEPRINCIPALID"

          echo "Building parameters file for ARM deployment..."
          PARAMETERS_FILE="$(pwd)/azuredeploy.parameters.json"
          echo $'[ { "name":"'branch'", "value":"'$BRANCH_NAME'" },' \
                '  { "name":"'commit'", "value":"'$GITHUB_SHA'" },' \
                '  { "name":"'location'", "value":"UK South" },' \
                '  { "name":"'devopsServicePrincipalId'", "value":"'$SERVICEPRINCIPALID'" }' \
                ']' \
            | jq '.' > "$PARAMETERS_FILE"
          cat $PARAMETERS_FILE

          ENVIRONMENT_INSTANCE_NAME='CI_Build___'"${BRANCH_NAME////__}"'___('"${GITHUB_SHA:0:8}"')'
          echo "Environment Instance Name: $ENVIRONMENT_INSTANCE_NAME"
          
          echo "::set-output name=ENVIRONMENT_INSTANCE_NAME::$ENVIRONMENT_INSTANCE_NAME"

          ENVIRONMENT_CREATE_OUTPUT=$(az lab environment create --resource-group $RESOURCE_GROUP \
                                                                --lab-name $LAB_NAME \
                                                                --name $ENVIRONMENT_INSTANCE_NAME \
                                                                --artifact-source-name $ARTIFACT_SOURCE_NAME \
                                                                --arm-template $ARM_TEMPLATE_NAME \
                                                                --parameter "@$PARAMETERS_FILE" \
                                                                --verbose \
                                         | jq '.'
                                     )

          echo "Output from 'az lab environment create'"
          echo $ENVIRONMENT_CREATE_OUTPUT

          PROVISIONING_STATE=$(echo $ENVIRONMENT_CREATE_OUTPUT |  jq --raw-output '.provisioningState')
          echo "Provisioning State: $PROVISIONING_STATE"

          ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME=$(echo $ENVIRONMENT_CREATE_OUTPUT |  jq --raw-output '.resourceGroupId' | xargs basename)
          echo "Resource Group Id: $ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME"
          
          echo "::set-output name=ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME::$ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME"

          if [ $PROVISIONING_STATE != "Succeeded" ]; then
            echo "::error Error provisioning lab environment"
            exit 1
          fi

          echo "========================================================================================================================================================================================================"


    - name: Get DevTest Labs Environment Resource Info
      id: get-devtest-labs-environment-resources
      uses: azure/CLI@v1
      with:
        #azcliversion: 2.24.0  # Versions prior to this have a bug creating environments
        inlineScript: |
          echo "========================================================================================================================================================================================================"
          echo "Azure CLI Version: $(az version |  jq '."azure-cli"')"
          echo
          echo "Connection info:"
          az account show | jq '. | {tenantId: .tenantId, subscriptionName: .name, userName: .user.name, userType: .user.type}'
          echo

          RESOURCE_GROUP="${{ steps.create-devtest-labs-environment.outputs.ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME }}"

          ENVIRONMENT_INSTANCE_RESOURCES=$(az resource list --resource-group $RESOURCE_GROUP \
                                            | jq '.[] | { name: .name, id: .id, provisioningState: .provisioningState, kind: .kind, location: .location, tags: .tags }'
                                          )

          echo "Output from 'az resource list --resource-group $RESOURCE_GROUP'"
          echo
          echo $ENVIRONMENT_INSTANCE_RESOURCES

          echo "::set-output name=ENVIRONMENT_INSTANCE_RESOURCES::$ENVIRONMENT_INSTANCE_RESOURCES"

          echo "========================================================================================================================================================================================================"




      # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        echo "ENVIRONMENT_INSTANCE_NAME: ${{ steps.create-devtest-labs-environment.outputs.ENVIRONMENT_INSTANCE_NAME }}"
        echo "ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME: ${{ steps.create-devtest-labs-environment.outputs.ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME }}"
        echo "ENVIRONMENT_INSTANCE_RESOURCES: ${{ steps.get-devtest-labs-environment-resources.outputs.ENVIRONMENT_INSTANCE_RESOURCES }}"
  # az lab arm-template show --resource-group $RESOURCE_GROUP \
  #                           --lab-name $LAB_NAME \
  #                           --artifact-source-name $ARTIFACT_SOURCE_NAME \
  #                           --name $ARM_TEMPLATE_NAME


      # # Once logged into Azure, run a test command to check it worked
      # - name: Azure CLI script
      #   uses: azure/CLI@v1
      #   with:
      #     # This is the version with the fix for creating a DevTest lab
      #     azcliversion: 2.24.0
      #     inlineScript: |
      #       az account show


      # # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.
