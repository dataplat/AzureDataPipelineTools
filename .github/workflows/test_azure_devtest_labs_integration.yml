# This is a basic workflow to help you get started with Actions

name: Integration Test on Azure DevTest Labs 

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
    - feature/azure-devtest-labs-arm-CICD
  #pull_request:
  #  branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-integration-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Variables for creating the leb environment
    env:
      RESOURCE_GROUP: AzureDataPipelineTools_CI
      LAB_NAME: AzureDataPipelineTools
      ARM_TEMPLATE_NAME: sqlcollaborative_AzureDataPipelineTools
      FUNCTIONS_PROJECT_NAME: DataPipelineTools.Functions
      BUILD_CONFIGURATION: Release
      RUN_SETTINGS_FILENAME: ./integrationTest.runsettings


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2


    # Build and run the unit tests
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} --output ./output


    # - name: List Build Files 
    #   run: |
    #     ls -ltAR ./${{ env.FUNCTIONS_PROJECT_NAME }}/bin/${{ env.BUILD_CONFIGURATION }}

    - name: Run Unit Tests
      run: dotnet test --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --filter TestCategory=UnitTest --output ./output --verbosity normal


    # Login to Azure
    - name: Log into Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_DEV_TEST_LABS_CREDENTIALS }}'



    # --raw-output is requiored on all jq commands that select strings, otherwise they come out with the quotes, which is interpreted as a command, and it likely won't exist!
    - name: Create DevTest Labs Environment
      id: create-devtest-labs-environment
      uses: azure/CLI@v1
      with:
        # azcliversion: 2.24.0  # Versions prior to this have a bug creating environments
        # This runs in a container, so all output is passed back using 'echo "::set-output name=OUTPUT_VAR_NAME::value here"', as files created won't persist.
        inlineScript: |
          # We need the secrets in an environment variable so they get passed to our shell script that does the work
          export SERVICE_PRINCIPAL_CREDENTIALS=$'${{ secrets.AZURE_DEV_TEST_LABS_CREDENTIALS }}'
          export ADDITIONAL_PRINCIPALS=$'${{ secrets.ADDITIONAL_PRINCIPALS }}'

          # Execute the script to create the dev test lab
          chmod +x ./.github/workflows/deploy.sh
          ./.github/workflows/deploy.sh
          
        
          
    
    
    # Runs a set of commands using the runners shell
    - name: Show create environment outputs
      run: |
        echo "ENVIRONMENT_INSTANCE_NAME:                ${{ steps.create-devtest-labs-environment.outputs.ENVIRONMENT_INSTANCE_NAME }}"
        echo "ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME: ${{ steps.create-devtest-labs-environment.outputs.ENVIRONMENT_INSTANCE_RESOURCE_GROUP_NAME }}"
        echo "FUNCTIONS_APP_NAME:                       ${{ steps.create-devtest-labs-environment.outputs.FUNCTIONS_APP_NAME }}"
        echo "FUNCTIONS_APP_URI:                        ${{ steps.create-devtest-labs-environment.outputs.FUNCTIONS_APP_URI }}"
        echo "STORAGE_ACCOUNT_NAME:                     ${{ steps.create-devtest-labs-environment.outputs.STORAGE_ACCOUNT_NAME }}"
        echo "STORAGE_CONTAINER_NAME:                   ${{ steps.create-devtest-labs-environment.outputs.STORAGE_CONTAINER_NAME }}"
        echo "KEY_VAULT_NAME:                           ${{ steps.create-devtest-labs-environment.outputs.KEY_VAULT_NAME }}"
        echo 'RUN_SETTINGS:                             ${{ steps.create-devtest-labs-environment.outputs.RUN_SETTINGS }}'
    
    
    # Write the runsettings output from the ARM script into a file so that the integration tests can use it
    - name: Write the DevTest Labs output runsettings to file
      run: |    
        echo '${{ steps.create-devtest-labs-environment.outputs.RUN_SETTINGS }}' > ${{ env.RUN_SETTINGS_FILENAME }}

   
     # Install AZCopy and copy sample files into the data lake
    - name: Install azcopy
      uses: kheiakiyama/install-azcopy-action@v1.0.3
      with:
        version: 'v10'
        creds: '${{ secrets.AZURE_DEV_TEST_LABS_CREDENTIALS }}'

    - name: Copy files to Azure Data Lake using AZCopy
      run: |

        STORAGE_ACCOUNT_NAME="${{ steps.create-devtest-labs-environment.outputs.STORAGE_ACCOUNT_NAME }}"
        STORAGE_CONTAINER_NAME="${{ steps.create-devtest-labs-environment.outputs.STORAGE_CONTAINER_NAME }}"
        # The exclude patter for the .keepDirectory files is not working, so workaround below if to find these files and remove them from ADLS
        azcopy copy "./DataPipelineTools.Functions.Tests/TestData" "https://$STORAGE_ACCOUNT_NAME.dfs.core.windows.net/$STORAGE_CONTAINER_NAME" --recursive=true --exclude-pattern=".keepDirectory"

        # Remove the .keepDirectory files, these are just used to allow us to add empty folders into the sample data in Git
        # See here for more info: https://github.com/Azure/azure-storage-azcopy/issues/796
        find ./DataPipelineTools.Functions.Tests/TestData -type f -name ".keepFolder"|while IFS=/ read FILENAME; do
          RELATIVE_PATH=$(echo "$FILENAME" | sed -r 's/\.\/DataPipelineTools\.Functions\.Tests\///g')
          azcopy rm "https://$STORAGE_ACCOUNT_NAME.dfs.core.windows.net/$STORAGE_CONTAINER_NAME/$RELATIVE_PATH"
        done

    
    - name: 'Deploy Azure Functions to Lab Environment using RBAC'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ steps.create-devtest-labs-environment.outputs.FUNCTIONS_APP_NAME }}
        package: './${{ env.FUNCTIONS_PROJECT_NAME }}/bin/${{ env.BUILD_CONFIGURATION }}'


    - name: Run Integration Tests
      run: dotnet test --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --filter TestCategory=IntegrationTest --output ./output --verbosity normal --settings ${{ env.RUN_SETTINGS_FILENAME }}



    
